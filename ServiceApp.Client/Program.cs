using Blazored.LocalStorage;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using ServiceApp.Client;
using ServiceApp.Client.Services;
using ServiceApp.Client.Utility;
using MudBlazor.Services;
using ServiceApp.Shared.Model;
using ServiceApp.Shared.Model.Services.Accounting;
using ServiceApp.Shared.Model.Services.Accounting.SubServices;
using ServiceApp.Shared.Model.Services.OtherServices.SubServices;
using ServiceApp.Shared.Model.Services.OtherServices;
using ServiceApp.Shared.Model.Services.PSA;
using ServiceApp.Shared.Model.Services.PSA.SubServices;
using ServiceApp.Shared.Model.Services.DFA;
using ServiceApp.Shared.Model.Services.DFA.SubServices;
using ServiceApp.Shared.Model.Services.Notary;
using ServiceApp.Shared.Model.Services.LTO;
using ServiceApp.Shared.Model.Services.LTO.SubService;
using ServiceApp.Shared.Model.Services.Airline;
using ServiceApp.Shared.Model.Services.Airline.SubServices;
using ServiceApp.Shared.Model.Services.VISAProcessing.SubServices;
using ServiceApp.Shared.Model.Services.VISAProcessing;
using ServiceApp.Shared.Model.Services.Financial;
using ServiceApp.Shared.Model.Services.Financial.SubServices;
using ServiceApp.Shared.Model.Services.ATMPortable;
using ServiceApp.Shared.Model.Services.ATMPortable.SubServices;

var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");
builder.Services.AddBlazoredLocalStorage();
builder.Services.AddAuthorizationCore();
builder.Services.AddScoped<AuthenticationStateProvider, UserAuthenticationStateprovider>();
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
builder.Services.AddScoped<IAuthService, AuthService>();
builder.Services.AddSingleton<ClientInfo>();
builder.Services.AddSingleton<IAccounting, Accounting>();
builder.Services.AddSingleton<IFilingOfTaxes, FilingOfTaxes>();
builder.Services.AddSingleton<IBIRRegistration, BIRRegistration>();
builder.Services.AddSingleton<IITRPreparation, ITRPreparation>();
builder.Services.AddSingleton<IDTIRegistration, DTIRegistration>();
builder.Services.AddSingleton<ISECRegistration, SECRegistration>();
builder.Services.AddSingleton<IBusinessPermit, BusinessPermit>();
builder.Services.AddSingleton<IPagIbigRegistration, PagIbigRegistration>();
builder.Services.AddSingleton<ISSSRegistration, SSSRegistration>();
builder.Services.AddSingleton<IPhilhealthRegistration, PhilhealthRegistration>();
builder.Services.AddSingleton<IBookkeeping, Bookkeeping>();
builder.Services.AddSingleton<IOtherServices, OtherServices>();
builder.Services.AddSingleton<ITransferofTitle, TransferofTitle>();
builder.Services.AddSingleton<IPCABAssistance, PCABAssistance>();
builder.Services.AddSingleton<INBIAssistance, NBIAssistance>();
builder.Services.AddSingleton<IWeddingManagement, WeddingManagement>();
builder.Services.AddSingleton<IPSA, PSA>();
builder.Services.AddSingleton<ICenomar, Cenomar>();
builder.Services.AddSingleton<IBirthCertificate, BirthCertificate>();
builder.Services.AddSingleton<IMarriageCertificate, MarriageCertificate>();
builder.Services.AddSingleton<IDeathCertificate, DeathCertificate>();
builder.Services.AddSingleton<IDFA, DFA>();
builder.Services.AddSingleton<IPassportAssistance, PassportAssistance>();
builder.Services.AddSingleton<ILossPassport, LossPassport>();
builder.Services.AddSingleton<INotary, Notary>();
builder.Services.AddSingleton<ILTO, LTO>();
builder.Services.AddSingleton<IRegistration, Registration>();
builder.Services.AddSingleton<IVISAProcessing, VISAProcessing>();
builder.Services.AddSingleton<IAirline, Airline>();
builder.Services.AddSingleton<IDomestic, Domestic>();
builder.Services.AddSingleton<IInternational, International>();
builder.Services.AddSingleton<IUSA, USA>();
builder.Services.AddSingleton<ICanadaETA, CanadaETA>();
builder.Services.AddSingleton<ICanadaRegular, CanadaRegular>();
builder.Services.AddSingleton<INewZealand, NewZealand>();
builder.Services.AddSingleton<IChina, China>();
builder.Services.AddSingleton<IJapan, Japan>();
builder.Services.AddSingleton<IAustralia, Australia>();
builder.Services.AddSingleton<IEuropeanCountries, EuropeanCountries>();
builder.Services.AddSingleton<ISouthKorea, SouthKorea>();
builder.Services.AddSingleton<IFinancial, Financial>();
builder.Services.AddSingleton<IGCash, GCash>();
builder.Services.AddSingleton<IATMPortable, ATMPortable>();
builder.Services.AddSingleton<IBankBalanceInquiry, BankBalanceInquiry>();
builder.Services.AddSingleton<IWithdrawal, Withdrawal>();

builder.Services.AddMudServices();
await builder.Build().RunAsync();
